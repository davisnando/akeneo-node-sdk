/* tslint:disable */
/* eslint-disable */
/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetProducts401Response,
  ProductUuids,
  Products1,
} from '../models';
import {
    GetProducts401ResponseFromJSON,
    GetProducts401ResponseToJSON,
    ProductUuidsFromJSON,
    ProductUuidsToJSON,
    Products1FromJSON,
    Products1ToJSON,
} from '../models';

export interface GetAppCatalogProductUuidsRequest {
    id: string;
    searchAfter?: string;
    limit?: number;
    updatedBefore?: Date;
    updatedAfter?: Date;
}

export interface GetAppCatalogProductsRequest {
    id: string;
    searchAfter?: string;
    limit?: number;
    updatedBefore?: Date;
    updatedAfter?: Date;
}

export interface GetAppCatalogProductsUuidRequest {
    id: string;
    uuid: string;
}

/**
 * 
 */
export class CatalogProductsApi extends runtime.BaseAPI {

    /**
     * This endpoint allows you to get the list of uuids of products contained in a catalog. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
     * Get the list of product uuids
     */
    async getAppCatalogProductUuidsRaw(requestParameters: GetAppCatalogProductUuidsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductUuids>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAppCatalogProductUuids.');
        }

        const queryParameters: any = {};

        if (requestParameters.searchAfter !== undefined) {
            queryParameters['search_after'] = requestParameters.searchAfter;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.updatedBefore !== undefined) {
            queryParameters['updated_before'] = (requestParameters.updatedBefore as any).toISOString().substr(0,10);
        }

        if (requestParameters.updatedAfter !== undefined) {
            queryParameters['updated_after'] = (requestParameters.updatedAfter as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rest/v1/catalogs/{id}/product-uuids`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductUuidsFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to get the list of uuids of products contained in a catalog. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
     * Get the list of product uuids
     */
    async getAppCatalogProductUuids(requestParameters: GetAppCatalogProductUuidsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductUuids> {
        const response = await this.getAppCatalogProductUuidsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to get the list of products related to a catalog. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your app settings are applied to the set of products you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
     * Get the list of products related to a catalog
     */
    async getAppCatalogProductsRaw(requestParameters: GetAppCatalogProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Products1>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAppCatalogProducts.');
        }

        const queryParameters: any = {};

        if (requestParameters.searchAfter !== undefined) {
            queryParameters['search_after'] = requestParameters.searchAfter;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.updatedBefore !== undefined) {
            queryParameters['updated_before'] = (requestParameters.updatedBefore as any).toISOString().substr(0,10);
        }

        if (requestParameters.updatedAfter !== undefined) {
            queryParameters['updated_after'] = (requestParameters.updatedAfter as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rest/v1/catalogs/{id}/products`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Products1FromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to get the list of products related to a catalog. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your app settings are applied to the set of products you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
     * Get the list of products related to a catalog
     */
    async getAppCatalogProducts(requestParameters: GetAppCatalogProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Products1> {
        const response = await this.getAppCatalogProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to get a specific product related to a catalog. In the Enterprise Edition, permissions based on your app settings are applied on the product you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
     * Get a product related to a catalog
     */
    async getAppCatalogProductsUuidRaw(requestParameters: GetAppCatalogProductsUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAppCatalogProductsUuid.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getAppCatalogProductsUuid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rest/v1/catalogs/{id}/products/{uuid}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint allows you to get a specific product related to a catalog. In the Enterprise Edition, permissions based on your app settings are applied on the product you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
     * Get a product related to a catalog
     */
    async getAppCatalogProductsUuid(requestParameters: GetAppCatalogProductsUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getAppCatalogProductsUuidRaw(requestParameters, initOverrides);
    }

}
