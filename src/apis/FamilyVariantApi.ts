/* tslint:disable */
/* eslint-disable */
/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FamilyVariants,
  GetProducts401Response,
  PatchFamiliesFamilyCodeVariantsRequest,
  PatchProducts200Response,
  PostFamiliesFamilyCodeVariantsRequest,
} from '../models';
import {
    FamilyVariantsFromJSON,
    FamilyVariantsToJSON,
    GetProducts401ResponseFromJSON,
    GetProducts401ResponseToJSON,
    PatchFamiliesFamilyCodeVariantsRequestFromJSON,
    PatchFamiliesFamilyCodeVariantsRequestToJSON,
    PatchProducts200ResponseFromJSON,
    PatchProducts200ResponseToJSON,
    PostFamiliesFamilyCodeVariantsRequestFromJSON,
    PostFamiliesFamilyCodeVariantsRequestToJSON,
} from '../models';

export interface GetFamiliesFamilyCodeVariantsRequest {
    familyCode: string;
    page?: number;
    limit?: number;
    withCount?: boolean;
}

export interface GetFamiliesFamilyCodeVariantsCodeRequest {
    familyCode: string;
    code: string;
}

export interface PatchFamiliesFamilyCodeVariantsOperationRequest {
    familyCode: string;
    body?: PatchFamiliesFamilyCodeVariantsRequest;
}

export interface PatchFamiliesFamilyCodeVariantsCodeRequest {
    familyCode: string;
    code: string;
    body: PostFamiliesFamilyCodeVariantsRequest;
}

/**
 * 
 */
export class FamilyVariantApi extends runtime.BaseAPI {

    /**
     * This endpoint allows you to get a list of family variants. Family variants are paginated and sorted by code.
     * Get list of family variants
     */
    async getFamiliesFamilyCodeVariantsRaw(requestParameters: GetFamiliesFamilyCodeVariantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FamilyVariants>> {
        if (requestParameters.familyCode === null || requestParameters.familyCode === undefined) {
            throw new runtime.RequiredError('familyCode','Required parameter requestParameters.familyCode was null or undefined when calling getFamiliesFamilyCodeVariants.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.withCount !== undefined) {
            queryParameters['with_count'] = requestParameters.withCount;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rest/v1/families/{family_code}/variants`.replace(`{${"family_code"}}`, encodeURIComponent(String(requestParameters.familyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FamilyVariantsFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to get a list of family variants. Family variants are paginated and sorted by code.
     * Get list of family variants
     */
    async getFamiliesFamilyCodeVariants(requestParameters: GetFamiliesFamilyCodeVariantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FamilyVariants> {
        const response = await this.getFamiliesFamilyCodeVariantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to get the information about a given family variant.
     * Get a family variant
     */
    async getFamiliesFamilyCodeVariantsCodeRaw(requestParameters: GetFamiliesFamilyCodeVariantsCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostFamiliesFamilyCodeVariantsRequest>> {
        if (requestParameters.familyCode === null || requestParameters.familyCode === undefined) {
            throw new runtime.RequiredError('familyCode','Required parameter requestParameters.familyCode was null or undefined when calling getFamiliesFamilyCodeVariantsCode.');
        }

        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getFamiliesFamilyCodeVariantsCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rest/v1/families/{family_code}/variants/{code}`.replace(`{${"family_code"}}`, encodeURIComponent(String(requestParameters.familyCode))).replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFamiliesFamilyCodeVariantsRequestFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to get the information about a given family variant.
     * Get a family variant
     */
    async getFamiliesFamilyCodeVariantsCode(requestParameters: GetFamiliesFamilyCodeVariantsCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostFamiliesFamilyCodeVariantsRequest> {
        const response = await this.getFamiliesFamilyCodeVariantsCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to update and/or create several family variants at once, for a given family.
     * Update/create several family variants
     */
    async patchFamiliesFamilyCodeVariantsRaw(requestParameters: PatchFamiliesFamilyCodeVariantsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatchProducts200Response>> {
        if (requestParameters.familyCode === null || requestParameters.familyCode === undefined) {
            throw new runtime.RequiredError('familyCode','Required parameter requestParameters.familyCode was null or undefined when calling patchFamiliesFamilyCodeVariants.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rest/v1/families/{family_code}/variants`.replace(`{${"family_code"}}`, encodeURIComponent(String(requestParameters.familyCode))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchFamiliesFamilyCodeVariantsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatchProducts200ResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to update and/or create several family variants at once, for a given family.
     * Update/create several family variants
     */
    async patchFamiliesFamilyCodeVariants(requestParameters: PatchFamiliesFamilyCodeVariantsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatchProducts200Response> {
        const response = await this.patchFamiliesFamilyCodeVariantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to update a given family variant. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no family variant exists for the given code, it creates it.
     * Update/create a family variant
     */
    async patchFamiliesFamilyCodeVariantsCodeRaw(requestParameters: PatchFamiliesFamilyCodeVariantsCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.familyCode === null || requestParameters.familyCode === undefined) {
            throw new runtime.RequiredError('familyCode','Required parameter requestParameters.familyCode was null or undefined when calling patchFamiliesFamilyCodeVariantsCode.');
        }

        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling patchFamiliesFamilyCodeVariantsCode.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchFamiliesFamilyCodeVariantsCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rest/v1/families/{family_code}/variants/{code}`.replace(`{${"family_code"}}`, encodeURIComponent(String(requestParameters.familyCode))).replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PostFamiliesFamilyCodeVariantsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint allows you to update a given family variant. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no family variant exists for the given code, it creates it.
     * Update/create a family variant
     */
    async patchFamiliesFamilyCodeVariantsCode(requestParameters: PatchFamiliesFamilyCodeVariantsCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchFamiliesFamilyCodeVariantsCodeRaw(requestParameters, initOverrides);
    }

}
