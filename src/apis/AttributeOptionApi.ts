/* tslint:disable */
/* eslint-disable */
/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AttributeOptions,
  AttributeOptionsEmbeddedItemsInnerAllOf,
  GetProducts401Response,
  PatchAttributesAttributeCodeOptionsRequest,
  PatchProducts200Response,
} from '../models';
import {
    AttributeOptionsFromJSON,
    AttributeOptionsToJSON,
    AttributeOptionsEmbeddedItemsInnerAllOfFromJSON,
    AttributeOptionsEmbeddedItemsInnerAllOfToJSON,
    GetProducts401ResponseFromJSON,
    GetProducts401ResponseToJSON,
    PatchAttributesAttributeCodeOptionsRequestFromJSON,
    PatchAttributesAttributeCodeOptionsRequestToJSON,
    PatchProducts200ResponseFromJSON,
    PatchProducts200ResponseToJSON,
} from '../models';

export interface GetAttributesAttributeCodeOptionsRequest {
    attributeCode: string;
    page?: number;
    limit?: number;
    withCount?: boolean;
}

export interface GetAttributesAttributeCodeOptionsCodeRequest {
    attributeCode: string;
    code: string;
}

export interface PatchAttributesAttributeCodeOptionsOperationRequest {
    attributeCode: string;
    body?: PatchAttributesAttributeCodeOptionsRequest;
}

export interface PatchAttributesAttributeCodeOptionsCodeRequest {
    attributeCode: string;
    code: string;
    body: AttributeOptionsEmbeddedItemsInnerAllOf;
}

export interface PostAttributesAttributeCodeOptionsRequest {
    attributeCode: string;
    body?: AttributeOptionsEmbeddedItemsInnerAllOf;
}

/**
 * 
 */
export class AttributeOptionApi extends runtime.BaseAPI {

    /**
     * This endpoint allows you to get a list of attribute options. Attribute options are paginated and sorted by code.
     * Get list of attribute options
     */
    async getAttributesAttributeCodeOptionsRaw(requestParameters: GetAttributesAttributeCodeOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeOptions>> {
        if (requestParameters.attributeCode === null || requestParameters.attributeCode === undefined) {
            throw new runtime.RequiredError('attributeCode','Required parameter requestParameters.attributeCode was null or undefined when calling getAttributesAttributeCodeOptions.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.withCount !== undefined) {
            queryParameters['with_count'] = requestParameters.withCount;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rest/v1/attributes/{attribute_code}/options`.replace(`{${"attribute_code"}}`, encodeURIComponent(String(requestParameters.attributeCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeOptionsFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to get a list of attribute options. Attribute options are paginated and sorted by code.
     * Get list of attribute options
     */
    async getAttributesAttributeCodeOptions(requestParameters: GetAttributesAttributeCodeOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeOptions> {
        const response = await this.getAttributesAttributeCodeOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to get the information about a given attribute option.
     * Get an attribute option
     */
    async getAttributesAttributeCodeOptionsCodeRaw(requestParameters: GetAttributesAttributeCodeOptionsCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeOptionsEmbeddedItemsInnerAllOf>> {
        if (requestParameters.attributeCode === null || requestParameters.attributeCode === undefined) {
            throw new runtime.RequiredError('attributeCode','Required parameter requestParameters.attributeCode was null or undefined when calling getAttributesAttributeCodeOptionsCode.');
        }

        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getAttributesAttributeCodeOptionsCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rest/v1/attributes/{attribute_code}/options/{code}`.replace(`{${"attribute_code"}}`, encodeURIComponent(String(requestParameters.attributeCode))).replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeOptionsEmbeddedItemsInnerAllOfFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to get the information about a given attribute option.
     * Get an attribute option
     */
    async getAttributesAttributeCodeOptionsCode(requestParameters: GetAttributesAttributeCodeOptionsCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeOptionsEmbeddedItemsInnerAllOf> {
        const response = await this.getAttributesAttributeCodeOptionsCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to update several attribute options at once.
     * Update/create several attribute options
     */
    async patchAttributesAttributeCodeOptionsRaw(requestParameters: PatchAttributesAttributeCodeOptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatchProducts200Response>> {
        if (requestParameters.attributeCode === null || requestParameters.attributeCode === undefined) {
            throw new runtime.RequiredError('attributeCode','Required parameter requestParameters.attributeCode was null or undefined when calling patchAttributesAttributeCodeOptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rest/v1/attributes/{attribute_code}/options`.replace(`{${"attribute_code"}}`, encodeURIComponent(String(requestParameters.attributeCode))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchAttributesAttributeCodeOptionsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatchProducts200ResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to update several attribute options at once.
     * Update/create several attribute options
     */
    async patchAttributesAttributeCodeOptions(requestParameters: PatchAttributesAttributeCodeOptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatchProducts200Response> {
        const response = await this.patchAttributesAttributeCodeOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to update a given attribute option. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no attribute option exists for the given code, it creates it.
     * Update/create an attribute option
     */
    async patchAttributesAttributeCodeOptionsCodeRaw(requestParameters: PatchAttributesAttributeCodeOptionsCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.attributeCode === null || requestParameters.attributeCode === undefined) {
            throw new runtime.RequiredError('attributeCode','Required parameter requestParameters.attributeCode was null or undefined when calling patchAttributesAttributeCodeOptionsCode.');
        }

        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling patchAttributesAttributeCodeOptionsCode.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAttributesAttributeCodeOptionsCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rest/v1/attributes/{attribute_code}/options/{code}`.replace(`{${"attribute_code"}}`, encodeURIComponent(String(requestParameters.attributeCode))).replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AttributeOptionsEmbeddedItemsInnerAllOfToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint allows you to update a given attribute option. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no attribute option exists for the given code, it creates it.
     * Update/create an attribute option
     */
    async patchAttributesAttributeCodeOptionsCode(requestParameters: PatchAttributesAttributeCodeOptionsCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchAttributesAttributeCodeOptionsCodeRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint allows you to create a new attribute option.
     * Create a new attribute option
     */
    async postAttributesAttributeCodeOptionsRaw(requestParameters: PostAttributesAttributeCodeOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.attributeCode === null || requestParameters.attributeCode === undefined) {
            throw new runtime.RequiredError('attributeCode','Required parameter requestParameters.attributeCode was null or undefined when calling postAttributesAttributeCodeOptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rest/v1/attributes/{attribute_code}/options`.replace(`{${"attribute_code"}}`, encodeURIComponent(String(requestParameters.attributeCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AttributeOptionsEmbeddedItemsInnerAllOfToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint allows you to create a new attribute option.
     * Create a new attribute option
     */
    async postAttributesAttributeCodeOptions(requestParameters: PostAttributesAttributeCodeOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postAttributesAttributeCodeOptionsRaw(requestParameters, initOverrides);
    }

}
