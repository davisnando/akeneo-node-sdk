/* tslint:disable */
/* eslint-disable */
/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Families,
  GetProducts401Response,
  PatchFamiliesRequest,
  PatchProducts200Response,
  PostFamiliesFamilyCodeVariantsRequest,
  PostFamiliesRequest,
} from '../models';
import {
    FamiliesFromJSON,
    FamiliesToJSON,
    GetProducts401ResponseFromJSON,
    GetProducts401ResponseToJSON,
    PatchFamiliesRequestFromJSON,
    PatchFamiliesRequestToJSON,
    PatchProducts200ResponseFromJSON,
    PatchProducts200ResponseToJSON,
    PostFamiliesFamilyCodeVariantsRequestFromJSON,
    PostFamiliesFamilyCodeVariantsRequestToJSON,
    PostFamiliesRequestFromJSON,
    PostFamiliesRequestToJSON,
} from '../models';

export interface GetFamiliesRequest {
    search?: string;
    page?: number;
    limit?: number;
    withCount?: boolean;
}

export interface GetFamiliesCodeRequest {
    code: string;
}

export interface PatchFamiliesOperationRequest {
    body?: PatchFamiliesRequest;
}

export interface PatchFamiliesCodeRequest {
    code: string;
    body: PostFamiliesRequest;
}

export interface PostFamiliesOperationRequest {
    body?: PostFamiliesRequest;
}

export interface PostFamiliesFamilyCodeVariantsOperationRequest {
    familyCode: string;
    body?: PostFamiliesFamilyCodeVariantsRequest;
}

/**
 * 
 */
export class FamilyApi extends runtime.BaseAPI {

    /**
     * This endpoint allows you to get a list of families. Families are paginated and sorted by code.
     * Get list of families
     */
    async getFamiliesRaw(requestParameters: GetFamiliesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Families>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.withCount !== undefined) {
            queryParameters['with_count'] = requestParameters.withCount;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rest/v1/families`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FamiliesFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to get a list of families. Families are paginated and sorted by code.
     * Get list of families
     */
    async getFamilies(requestParameters: GetFamiliesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Families> {
        const response = await this.getFamiliesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to get the information about a given family.
     * Get a family
     */
    async getFamiliesCodeRaw(requestParameters: GetFamiliesCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostFamiliesRequest>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getFamiliesCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rest/v1/families/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFamiliesRequestFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to get the information about a given family.
     * Get a family
     */
    async getFamiliesCode(requestParameters: GetFamiliesCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostFamiliesRequest> {
        const response = await this.getFamiliesCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to update and/or create several families at once.
     * Update/create several families
     */
    async patchFamiliesRaw(requestParameters: PatchFamiliesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatchProducts200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rest/v1/families`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchFamiliesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatchProducts200ResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to update and/or create several families at once.
     * Update/create several families
     */
    async patchFamilies(requestParameters: PatchFamiliesOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatchProducts200Response> {
        const response = await this.patchFamiliesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to update a given family. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no family exists for the given code, it creates it.
     * Update/create a family
     */
    async patchFamiliesCodeRaw(requestParameters: PatchFamiliesCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling patchFamiliesCode.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchFamiliesCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rest/v1/families/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PostFamiliesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint allows you to update a given family. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no family exists for the given code, it creates it.
     * Update/create a family
     */
    async patchFamiliesCode(requestParameters: PatchFamiliesCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchFamiliesCodeRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint allows you to create a new family.
     * Create a new family
     */
    async postFamiliesRaw(requestParameters: PostFamiliesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rest/v1/families`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostFamiliesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint allows you to create a new family.
     * Create a new family
     */
    async postFamilies(requestParameters: PostFamiliesOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postFamiliesRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint allows you to create a family variant.
     * Create a new family variant
     */
    async postFamiliesFamilyCodeVariantsRaw(requestParameters: PostFamiliesFamilyCodeVariantsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.familyCode === null || requestParameters.familyCode === undefined) {
            throw new runtime.RequiredError('familyCode','Required parameter requestParameters.familyCode was null or undefined when calling postFamiliesFamilyCodeVariants.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rest/v1/families/{family_code}/variants`.replace(`{${"family_code"}}`, encodeURIComponent(String(requestParameters.familyCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostFamiliesFamilyCodeVariantsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint allows you to create a family variant.
     * Create a new family variant
     */
    async postFamiliesFamilyCodeVariants(requestParameters: PostFamiliesFamilyCodeVariantsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postFamiliesFamilyCodeVariantsRaw(requestParameters, initOverrides);
    }

}
