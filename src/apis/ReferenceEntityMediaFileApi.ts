/* tslint:disable */
/* eslint-disable */
/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  GetProducts401Response,
  PostReferenceEntityMediaFilesRequest,
} from "../models";
import {
  GetProducts401ResponseFromJSON,
  GetProducts401ResponseToJSON,
  PostReferenceEntityMediaFilesRequestFromJSON,
  PostReferenceEntityMediaFilesRequestToJSON,
} from "../models";

export interface GetReferenceEntityMediaFilesCodeRequest {
  code: string;
}

export interface PostReferenceEntityMediaFilesOperationRequest {
  contentType: string;
  body?: PostReferenceEntityMediaFilesRequest;
}

/**
 *
 */
export class ReferenceEntityMediaFileApi extends runtime.BaseAPI {
  /**
   * This endpoint allows you to download a given media file that is associated with a reference entity or a record.
   * Download the media file associated to a reference entity or a record
   */
  async getReferenceEntityMediaFilesCodeRaw(
    requestParameters: GetReferenceEntityMediaFilesCodeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.code === null ||
      requestParameters.code === undefined
    ) {
      throw new runtime.RequiredError(
        "code",
        "Required parameter requestParameters.code was null or undefined when calling getReferenceEntityMediaFilesCode."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/rest/v1/reference-entities-media-files/{code}`.replace(
          `{${"code"}}`,
          encodeURIComponent(String(requestParameters.code))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * This endpoint allows you to download a given media file that is associated with a reference entity or a record.
   * Download the media file associated to a reference entity or a record
   */
  async getReferenceEntityMediaFilesCode(
    requestParameters: GetReferenceEntityMediaFilesCodeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.getReferenceEntityMediaFilesCodeRaw(
      requestParameters,
      initOverrides
    );
  }

  /**
   * This endpoint allows you to create a new media file and associate it to the image of a reference entity, or to the main image or to an attribute value of a record.
   * Create a new media file for a reference entity or a record
   */
  async postReferenceEntityMediaFilesRaw(
    requestParameters: PostReferenceEntityMediaFilesOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.contentType === null ||
      requestParameters.contentType === undefined
    ) {
      throw new runtime.RequiredError(
        "contentType",
        "Required parameter requestParameters.contentType was null or undefined when calling postReferenceEntityMediaFiles."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      requestParameters.contentType !== undefined &&
      requestParameters.contentType !== null
    ) {
      headerParameters["Content-Type"] = String(requestParameters.contentType);
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/reference-entities-media-files`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: PostReferenceEntityMediaFilesRequestToJSON(
          requestParameters.body
        ),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * This endpoint allows you to create a new media file and associate it to the image of a reference entity, or to the main image or to an attribute value of a record.
   * Create a new media file for a reference entity or a record
   */
  async postReferenceEntityMediaFiles(
    requestParameters: PostReferenceEntityMediaFilesOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.postReferenceEntityMediaFilesRaw(
      requestParameters,
      initOverrides
    );
  }
}
