/* tslint:disable */
/* eslint-disable */
/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetProducts401Response,
  PatchProductsUuid200Response,
  PatchProductsUuidRequest,
  PostProductsUuidRequest,
  Products1,
  Products1EmbeddedItemsInnerAllOf,
} from '../models';
import {
    GetProducts401ResponseFromJSON,
    GetProducts401ResponseToJSON,
    PatchProductsUuid200ResponseFromJSON,
    PatchProductsUuid200ResponseToJSON,
    PatchProductsUuidRequestFromJSON,
    PatchProductsUuidRequestToJSON,
    PostProductsUuidRequestFromJSON,
    PostProductsUuidRequestToJSON,
    Products1FromJSON,
    Products1ToJSON,
    Products1EmbeddedItemsInnerAllOfFromJSON,
    Products1EmbeddedItemsInnerAllOfToJSON,
} from '../models';

export interface DeleteProductsUuidUuidRequest {
    uuid: string;
}

export interface GetDraftUuidUuidRequest {
    uuid: string;
}

export interface GetProductsUuidRequest {
    search?: string;
    scope?: string;
    locales?: string;
    attributes?: string;
    paginationType?: GetProductsUuidPaginationTypeEnum;
    page?: number;
    searchAfter?: string;
    limit?: number;
    withCount?: boolean;
    withAttributeOptions?: boolean;
    withQualityScores?: boolean;
    withCompletenesses?: boolean;
}

export interface GetProductsUuidUuidRequest {
    uuid: string;
    withAttributeOptions?: boolean;
    withQualityScores?: boolean;
    withCompletenesses?: boolean;
}

export interface PatchProductsUuidOperationRequest {
    body?: PatchProductsUuidRequest;
}

export interface PatchProductsUuidUuidRequest {
    uuid: string;
    body: PostProductsUuidRequest;
}

export interface PostProductsUuidOperationRequest {
    body?: PostProductsUuidRequest;
}

export interface PostProposalUuidRequest {
    uuid: string;
}

/**
 * 
 */
export class ProductUuidApi extends runtime.BaseAPI {

    /**
     * This endpoint allows you to delete a given product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to delete.
     * Delete a product
     */
    async deleteProductsUuidUuidRaw(requestParameters: DeleteProductsUuidUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling deleteProductsUuidUuid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rest/v1/products-uuid/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint allows you to delete a given product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to delete.
     * Delete a product
     */
    async deleteProductsUuidUuid(requestParameters: DeleteProductsUuidUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProductsUuidUuidRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint allows you to get the information about a given draft.
     * Get a draft
     */
    async getDraftUuidUuidRaw(requestParameters: GetDraftUuidUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Products1EmbeddedItemsInnerAllOf>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getDraftUuidUuid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rest/v1/products-uuid/{uuid}/draft`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Products1EmbeddedItemsInnerAllOfFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to get the information about a given draft.
     * Get a draft
     */
    async getDraftUuidUuid(requestParameters: GetDraftUuidUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Products1EmbeddedItemsInnerAllOf> {
        const response = await this.getDraftUuidUuidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to get a list of products. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your user groups are applied to the set of products you request.
     * Get list of products
     */
    async getProductsUuidRaw(requestParameters: GetProductsUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Products1>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.locales !== undefined) {
            queryParameters['locales'] = requestParameters.locales;
        }

        if (requestParameters.attributes !== undefined) {
            queryParameters['attributes'] = requestParameters.attributes;
        }

        if (requestParameters.paginationType !== undefined) {
            queryParameters['pagination_type'] = requestParameters.paginationType;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.searchAfter !== undefined) {
            queryParameters['search_after'] = requestParameters.searchAfter;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.withCount !== undefined) {
            queryParameters['with_count'] = requestParameters.withCount;
        }

        if (requestParameters.withAttributeOptions !== undefined) {
            queryParameters['with_attribute_options'] = requestParameters.withAttributeOptions;
        }

        if (requestParameters.withQualityScores !== undefined) {
            queryParameters['with_quality_scores'] = requestParameters.withQualityScores;
        }

        if (requestParameters.withCompletenesses !== undefined) {
            queryParameters['with_completenesses'] = requestParameters.withCompletenesses;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rest/v1/products-uuid`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Products1FromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to get a list of products. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your user groups are applied to the set of products you request.
     * Get list of products
     */
    async getProductsUuid(requestParameters: GetProductsUuidRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Products1> {
        const response = await this.getProductsUuidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to get the information about a given product. In the Entreprise Edition, permissions based on your user groups are applied to the product you request.
     * Get a product
     */
    async getProductsUuidUuidRaw(requestParameters: GetProductsUuidUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Products1EmbeddedItemsInnerAllOf>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getProductsUuidUuid.');
        }

        const queryParameters: any = {};

        if (requestParameters.withAttributeOptions !== undefined) {
            queryParameters['with_attribute_options'] = requestParameters.withAttributeOptions;
        }

        if (requestParameters.withQualityScores !== undefined) {
            queryParameters['with_quality_scores'] = requestParameters.withQualityScores;
        }

        if (requestParameters.withCompletenesses !== undefined) {
            queryParameters['with_completenesses'] = requestParameters.withCompletenesses;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rest/v1/products-uuid/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Products1EmbeddedItemsInnerAllOfFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to get the information about a given product. In the Entreprise Edition, permissions based on your user groups are applied to the product you request.
     * Get a product
     */
    async getProductsUuidUuid(requestParameters: GetProductsUuidUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Products1EmbeddedItemsInnerAllOf> {
        const response = await this.getProductsUuidUuidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to update and/or create several products at once. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given uuid, it creates it. In the Enterprise Edition, permissions based on your user groups are applied to the products you try to update. It may result in the creation of drafts if you only have edit rights through the product\'s categories.
     * Update/create several products
     */
    async patchProductsUuidRaw(requestParameters: PatchProductsUuidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatchProductsUuid200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rest/v1/products-uuid`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchProductsUuidRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatchProductsUuid200ResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to update and/or create several products at once. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given uuid, it creates it. In the Enterprise Edition, permissions based on your user groups are applied to the products you try to update. It may result in the creation of drafts if you only have edit rights through the product\'s categories.
     * Update/create several products
     */
    async patchProductsUuid(requestParameters: PatchProductsUuidOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatchProductsUuid200Response> {
        const response = await this.patchProductsUuidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to update a given product. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given uuid, it creates it. In the Entreprise Edition, permissions based on your user groups are applied to the product you try to update. It may result in the creation of a draft if you only have edit rights through the product\'s categories.
     * Update/create a product
     */
    async patchProductsUuidUuidRaw(requestParameters: PatchProductsUuidUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling patchProductsUuidUuid.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchProductsUuidUuid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rest/v1/products-uuid/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PostProductsUuidRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint allows you to update a given product. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given uuid, it creates it. In the Entreprise Edition, permissions based on your user groups are applied to the product you try to update. It may result in the creation of a draft if you only have edit rights through the product\'s categories.
     * Update/create a product
     */
    async patchProductsUuidUuid(requestParameters: PatchProductsUuidUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchProductsUuidUuidRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint allows you to create a new product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to create. If no uuid is provided, the PIM will generate one for you.
     * Create a new product
     */
    async postProductsUuidRaw(requestParameters: PostProductsUuidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rest/v1/products-uuid`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostProductsUuidRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint allows you to create a new product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to create. If no uuid is provided, the PIM will generate one for you.
     * Create a new product
     */
    async postProductsUuid(requestParameters: PostProductsUuidOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postProductsUuidRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint allows you to submit a draft for approval.
     * Submit a draft for approval
     */
    async postProposalUuidRaw(requestParameters: PostProposalUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling postProposalUuid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rest/v1/products-uuid/{uuid}/proposal`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint allows you to submit a draft for approval.
     * Submit a draft for approval
     */
    async postProposalUuid(requestParameters: PostProposalUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postProposalUuidRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const GetProductsUuidPaginationTypeEnum = {
    Page: 'page',
    SearchAfter: 'search_after'
} as const;
export type GetProductsUuidPaginationTypeEnum = typeof GetProductsUuidPaginationTypeEnum[keyof typeof GetProductsUuidPaginationTypeEnum];
