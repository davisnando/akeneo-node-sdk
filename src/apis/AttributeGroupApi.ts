/* tslint:disable */
/* eslint-disable */
/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AttributeGroups,
  AttributeGroupsPostRequest,
  GetProducts401Response,
  PatchProducts200Response,
  SeveralAttributeGroupsPatchRequest,
} from '../models';
import {
    AttributeGroupsFromJSON,
    AttributeGroupsToJSON,
    AttributeGroupsPostRequestFromJSON,
    AttributeGroupsPostRequestToJSON,
    GetProducts401ResponseFromJSON,
    GetProducts401ResponseToJSON,
    PatchProducts200ResponseFromJSON,
    PatchProducts200ResponseToJSON,
    SeveralAttributeGroupsPatchRequestFromJSON,
    SeveralAttributeGroupsPatchRequestToJSON,
} from '../models';

export interface AttributeGroupsGetRequest {
    code: string;
}

export interface AttributeGroupsGetListRequest {
    search?: string;
    page?: number;
    limit?: number;
    withCount?: boolean;
}

export interface AttributeGroupsPatchRequest {
    code: string;
    body: AttributeGroupsPostRequest;
}

export interface AttributeGroupsPostOperationRequest {
    body?: AttributeGroupsPostRequest;
}

export interface SeveralAttributeGroupsPatchOperationRequest {
    body?: SeveralAttributeGroupsPatchRequest;
}

/**
 * 
 */
export class AttributeGroupApi extends runtime.BaseAPI {

    /**
     * This endpoint allows you to get the information about a given attribute group.
     * Get an attribute group
     */
    async attributeGroupsGetRaw(requestParameters: AttributeGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeGroupsPostRequest>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling attributeGroupsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rest/v1/attribute-groups/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeGroupsPostRequestFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to get the information about a given attribute group.
     * Get an attribute group
     */
    async attributeGroupsGet(requestParameters: AttributeGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeGroupsPostRequest> {
        const response = await this.attributeGroupsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to get a list of attribute groups. Attribute groups are paginated and sorted by code.
     * Get list of attribute groups
     */
    async attributeGroupsGetListRaw(requestParameters: AttributeGroupsGetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeGroups>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.withCount !== undefined) {
            queryParameters['with_count'] = requestParameters.withCount;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rest/v1/attribute-groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeGroupsFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to get a list of attribute groups. Attribute groups are paginated and sorted by code.
     * Get list of attribute groups
     */
    async attributeGroupsGetList(requestParameters: AttributeGroupsGetListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeGroups> {
        const response = await this.attributeGroupsGetListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to update a given attribute group. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no attribute group exists for the given code, it creates it.
     * Update/create an attribute group
     */
    async attributeGroupsPatchRaw(requestParameters: AttributeGroupsPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling attributeGroupsPatch.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling attributeGroupsPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rest/v1/attribute-groups/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AttributeGroupsPostRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint allows you to update a given attribute group. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no attribute group exists for the given code, it creates it.
     * Update/create an attribute group
     */
    async attributeGroupsPatch(requestParameters: AttributeGroupsPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.attributeGroupsPatchRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint allows you to create a new attribute group.
     * Create a new attribute group
     */
    async attributeGroupsPostRaw(requestParameters: AttributeGroupsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rest/v1/attribute-groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AttributeGroupsPostRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint allows you to create a new attribute group.
     * Create a new attribute group
     */
    async attributeGroupsPost(requestParameters: AttributeGroupsPostOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.attributeGroupsPostRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint allows you to update and/or create several attribute groups at once.
     * Update/create several attribute groups
     */
    async severalAttributeGroupsPatchRaw(requestParameters: SeveralAttributeGroupsPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatchProducts200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rest/v1/attribute-groups`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SeveralAttributeGroupsPatchRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatchProducts200ResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to update and/or create several attribute groups at once.
     * Update/create several attribute groups
     */
    async severalAttributeGroupsPatch(requestParameters: SeveralAttributeGroupsPatchOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatchProducts200Response> {
        const response = await this.severalAttributeGroupsPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
