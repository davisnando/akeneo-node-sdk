/* tslint:disable */
/* eslint-disable */
/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetProducts401Response,
  PatchReferenceEntityRecords200ResponseInner,
  PatchReferenceEntityRecordsCodeRequest,
  PatchReferenceEntityRecordsRequestInner,
  ReferenceEntityRecord,
} from '../models';
import {
    GetProducts401ResponseFromJSON,
    GetProducts401ResponseToJSON,
    PatchReferenceEntityRecords200ResponseInnerFromJSON,
    PatchReferenceEntityRecords200ResponseInnerToJSON,
    PatchReferenceEntityRecordsCodeRequestFromJSON,
    PatchReferenceEntityRecordsCodeRequestToJSON,
    PatchReferenceEntityRecordsRequestInnerFromJSON,
    PatchReferenceEntityRecordsRequestInnerToJSON,
    ReferenceEntityRecordFromJSON,
    ReferenceEntityRecordToJSON,
} from '../models';

export interface GetReferenceEntityRecordsRequest {
    referenceEntityCode: string;
    search?: string;
    channel?: string;
    locales?: string;
    searchAfter?: string;
}

export interface GetReferenceEntityRecordsCodeRequest {
    referenceEntityCode: string;
    code: string;
}

export interface PatchReferenceEntityRecordsRequest {
    referenceEntityCode: string;
    body: Array<PatchReferenceEntityRecordsRequestInner>;
}

export interface PatchReferenceEntityRecordsCodeOperationRequest {
    referenceEntityCode: string;
    code: string;
    body: PatchReferenceEntityRecordsCodeRequest;
}

/**
 * 
 */
export class ReferenceEntityRecordApi extends runtime.BaseAPI {

    /**
     * This endpoint allows you to get a list of records of a given reference entity. Records are paginated and can be filtered.
     * Get the list of the records of a reference entity
     */
    async getReferenceEntityRecordsRaw(requestParameters: GetReferenceEntityRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferenceEntityRecord>> {
        if (requestParameters.referenceEntityCode === null || requestParameters.referenceEntityCode === undefined) {
            throw new runtime.RequiredError('referenceEntityCode','Required parameter requestParameters.referenceEntityCode was null or undefined when calling getReferenceEntityRecords.');
        }

        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.channel !== undefined) {
            queryParameters['channel'] = requestParameters.channel;
        }

        if (requestParameters.locales !== undefined) {
            queryParameters['locales'] = requestParameters.locales;
        }

        if (requestParameters.searchAfter !== undefined) {
            queryParameters['search_after'] = requestParameters.searchAfter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rest/v1/reference-entities/{reference_entity_code}/records`.replace(`{${"reference_entity_code"}}`, encodeURIComponent(String(requestParameters.referenceEntityCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceEntityRecordFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to get a list of records of a given reference entity. Records are paginated and can be filtered.
     * Get the list of the records of a reference entity
     */
    async getReferenceEntityRecords(requestParameters: GetReferenceEntityRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferenceEntityRecord> {
        const response = await this.getReferenceEntityRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to get the information about a given record for a given reference entity.
     * Get a record of a given reference entity
     */
    async getReferenceEntityRecordsCodeRaw(requestParameters: GetReferenceEntityRecordsCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatchReferenceEntityRecordsRequestInner>> {
        if (requestParameters.referenceEntityCode === null || requestParameters.referenceEntityCode === undefined) {
            throw new runtime.RequiredError('referenceEntityCode','Required parameter requestParameters.referenceEntityCode was null or undefined when calling getReferenceEntityRecordsCode.');
        }

        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getReferenceEntityRecordsCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rest/v1/reference-entities/{reference_entity_code}/records/{code}`.replace(`{${"reference_entity_code"}}`, encodeURIComponent(String(requestParameters.referenceEntityCode))).replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatchReferenceEntityRecordsRequestInnerFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to get the information about a given record for a given reference entity.
     * Get a record of a given reference entity
     */
    async getReferenceEntityRecordsCode(requestParameters: GetReferenceEntityRecordsCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatchReferenceEntityRecordsRequestInner> {
        const response = await this.getReferenceEntityRecordsCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to update and/or create several records of one given reference entity at once. Learn more about <a href=\"/documentation/update.html#patch-reference-entity-record-values\">Update behavior</a>. Note that if the record does not already exist for the given reference entity, it creates it.
     * Update/create several reference entity records
     */
    async patchReferenceEntityRecordsRaw(requestParameters: PatchReferenceEntityRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PatchReferenceEntityRecords200ResponseInner>>> {
        if (requestParameters.referenceEntityCode === null || requestParameters.referenceEntityCode === undefined) {
            throw new runtime.RequiredError('referenceEntityCode','Required parameter requestParameters.referenceEntityCode was null or undefined when calling patchReferenceEntityRecords.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchReferenceEntityRecords.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rest/v1/reference-entities/{reference_entity_code}/records`.replace(`{${"reference_entity_code"}}`, encodeURIComponent(String(requestParameters.referenceEntityCode))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body.map(PatchReferenceEntityRecordsRequestInnerToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PatchReferenceEntityRecords200ResponseInnerFromJSON));
    }

    /**
     * This endpoint allows you to update and/or create several records of one given reference entity at once. Learn more about <a href=\"/documentation/update.html#patch-reference-entity-record-values\">Update behavior</a>. Note that if the record does not already exist for the given reference entity, it creates it.
     * Update/create several reference entity records
     */
    async patchReferenceEntityRecords(requestParameters: PatchReferenceEntityRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PatchReferenceEntityRecords200ResponseInner>> {
        const response = await this.patchReferenceEntityRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows you to update a given record of a given renference entity. Learn more about <a href=\"/documentation/update.html#patch-reference-entity-record-values\">Update behavior</a>. Note that if the record does not already exist for the given reference entity, it creates it.
     * Update/create a record of a given reference entity
     */
    async patchReferenceEntityRecordsCodeRaw(requestParameters: PatchReferenceEntityRecordsCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.referenceEntityCode === null || requestParameters.referenceEntityCode === undefined) {
            throw new runtime.RequiredError('referenceEntityCode','Required parameter requestParameters.referenceEntityCode was null or undefined when calling patchReferenceEntityRecordsCode.');
        }

        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling patchReferenceEntityRecordsCode.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchReferenceEntityRecordsCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rest/v1/reference-entities/{reference_entity_code}/records/{code}`.replace(`{${"reference_entity_code"}}`, encodeURIComponent(String(requestParameters.referenceEntityCode))).replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchReferenceEntityRecordsCodeRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint allows you to update a given record of a given renference entity. Learn more about <a href=\"/documentation/update.html#patch-reference-entity-record-values\">Update behavior</a>. Note that if the record does not already exist for the given reference entity, it creates it.
     * Update/create a record of a given reference entity
     */
    async patchReferenceEntityRecordsCode(requestParameters: PatchReferenceEntityRecordsCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchReferenceEntityRecordsCodeRaw(requestParameters, initOverrides);
    }

}
