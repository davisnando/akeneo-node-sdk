/* tslint:disable */
/* eslint-disable */
/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CategoryListAllOfLabels } from './CategoryListAllOfLabels';
import {
    CategoryListAllOfLabelsFromJSON,
    CategoryListAllOfLabelsFromJSONTyped,
    CategoryListAllOfLabelsToJSON,
} from './CategoryListAllOfLabels';
import type { CategoryListAllOfValues } from './CategoryListAllOfValues';
import {
    CategoryListAllOfValuesFromJSON,
    CategoryListAllOfValuesFromJSONTyped,
    CategoryListAllOfValuesToJSON,
} from './CategoryListAllOfValues';
import type { ProductListAllOfLinks } from './ProductListAllOfLinks';
import {
    ProductListAllOfLinksFromJSON,
    ProductListAllOfLinksFromJSONTyped,
    ProductListAllOfLinksToJSON,
} from './ProductListAllOfLinks';

/**
 * 
 * @export
 * @interface CategoryList
 */
export interface CategoryList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof CategoryList
     */
    links?: ProductListAllOfLinks;
    /**
     * Category code
     * @type {string}
     * @memberof CategoryList
     */
    code: string;
    /**
     * Category code of the parent's category
     * @type {string}
     * @memberof CategoryList
     */
    parent?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof CategoryList
     */
    updated?: string;
    /**
     * Position of the category in its level, start from 1 (only available on SaaS platforms and when query parameter "with_position" is set to "true")
     * @type {number}
     * @memberof CategoryList
     */
    position?: number;
    /**
     * 
     * @type {CategoryListAllOfLabels}
     * @memberof CategoryList
     */
    labels?: CategoryListAllOfLabels;
    /**
     * 
     * @type {CategoryListAllOfValues}
     * @memberof CategoryList
     */
    values?: CategoryListAllOfValues;
}

/**
 * Check if a given object implements the CategoryList interface.
 */
export function instanceOfCategoryList(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "code" in value;

    return isInstance;
}

export function CategoryListFromJSON(json: any): CategoryList {
    return CategoryListFromJSONTyped(json, false);
}

export function CategoryListFromJSONTyped(json: any, ignoreDiscriminator: boolean): CategoryList {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'links': !exists(json, '_links') ? undefined : ProductListAllOfLinksFromJSON(json['_links']),
        'code': json['code'],
        'parent': !exists(json, 'parent') ? undefined : json['parent'],
        'updated': !exists(json, 'updated') ? undefined : json['updated'],
        'position': !exists(json, 'position') ? undefined : json['position'],
        'labels': !exists(json, 'labels') ? undefined : CategoryListAllOfLabelsFromJSON(json['labels']),
        'values': !exists(json, 'values') ? undefined : CategoryListAllOfValuesFromJSON(json['values']),
    };
}

export function CategoryListToJSON(value?: CategoryList | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '_links': ProductListAllOfLinksToJSON(value.links),
        'code': value.code,
        'parent': value.parent,
        'updated': value.updated,
        'position': value.position,
        'labels': CategoryListAllOfLabelsToJSON(value.labels),
        'values': CategoryListAllOfValuesToJSON(value.values),
    };
}

