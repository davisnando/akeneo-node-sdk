/* tslint:disable */
/* eslint-disable */
/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChannelsEmbeddedItemsInnerAllOfConversionUnits } from './ChannelsEmbeddedItemsInnerAllOfConversionUnits';
import {
    ChannelsEmbeddedItemsInnerAllOfConversionUnitsFromJSON,
    ChannelsEmbeddedItemsInnerAllOfConversionUnitsFromJSONTyped,
    ChannelsEmbeddedItemsInnerAllOfConversionUnitsToJSON,
} from './ChannelsEmbeddedItemsInnerAllOfConversionUnits';
import type { ChannelsEmbeddedItemsInnerAllOfLabels } from './ChannelsEmbeddedItemsInnerAllOfLabels';
import {
    ChannelsEmbeddedItemsInnerAllOfLabelsFromJSON,
    ChannelsEmbeddedItemsInnerAllOfLabelsFromJSONTyped,
    ChannelsEmbeddedItemsInnerAllOfLabelsToJSON,
} from './ChannelsEmbeddedItemsInnerAllOfLabels';

/**
 * 
 * @export
 * @interface SeveralChannelsPatchRequest
 */
export interface SeveralChannelsPatchRequest {
    /**
     * Channel code
     * @type {string}
     * @memberof SeveralChannelsPatchRequest
     */
    code: string;
    /**
     * Codes of activated locales for the channel
     * @type {Array<string>}
     * @memberof SeveralChannelsPatchRequest
     */
    locales: Array<string>;
    /**
     * Codes of activated currencies for the channel
     * @type {Array<string>}
     * @memberof SeveralChannelsPatchRequest
     */
    currencies: Array<string>;
    /**
     * Code of the category tree linked to the channel
     * @type {string}
     * @memberof SeveralChannelsPatchRequest
     */
    categoryTree: string;
    /**
     * 
     * @type {ChannelsEmbeddedItemsInnerAllOfConversionUnits}
     * @memberof SeveralChannelsPatchRequest
     */
    conversionUnits?: ChannelsEmbeddedItemsInnerAllOfConversionUnits;
    /**
     * 
     * @type {ChannelsEmbeddedItemsInnerAllOfLabels}
     * @memberof SeveralChannelsPatchRequest
     */
    labels?: ChannelsEmbeddedItemsInnerAllOfLabels;
}

/**
 * Check if a given object implements the SeveralChannelsPatchRequest interface.
 */
export function instanceOfSeveralChannelsPatchRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "code" in value;
    isInstance = isInstance && "locales" in value;
    isInstance = isInstance && "currencies" in value;
    isInstance = isInstance && "categoryTree" in value;

    return isInstance;
}

export function SeveralChannelsPatchRequestFromJSON(json: any): SeveralChannelsPatchRequest {
    return SeveralChannelsPatchRequestFromJSONTyped(json, false);
}

export function SeveralChannelsPatchRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeveralChannelsPatchRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': json['code'],
        'locales': json['locales'],
        'currencies': json['currencies'],
        'categoryTree': json['category_tree'],
        'conversionUnits': !exists(json, 'conversion_units') ? undefined : ChannelsEmbeddedItemsInnerAllOfConversionUnitsFromJSON(json['conversion_units']),
        'labels': !exists(json, 'labels') ? undefined : ChannelsEmbeddedItemsInnerAllOfLabelsFromJSON(json['labels']),
    };
}

export function SeveralChannelsPatchRequestToJSON(value?: SeveralChannelsPatchRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'locales': value.locales,
        'currencies': value.currencies,
        'category_tree': value.categoryTree,
        'conversion_units': ChannelsEmbeddedItemsInnerAllOfConversionUnitsToJSON(value.conversionUnits),
        'labels': ChannelsEmbeddedItemsInnerAllOfLabelsToJSON(value.labels),
    };
}

