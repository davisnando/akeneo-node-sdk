/* tslint:disable */
/* eslint-disable */
/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MediaFilesEmbeddedItemsInnerAllOfLinks } from './MediaFilesEmbeddedItemsInnerAllOfLinks';
import {
    MediaFilesEmbeddedItemsInnerAllOfLinksFromJSON,
    MediaFilesEmbeddedItemsInnerAllOfLinksFromJSONTyped,
    MediaFilesEmbeddedItemsInnerAllOfLinksToJSON,
} from './MediaFilesEmbeddedItemsInnerAllOfLinks';

/**
 * 
 * @export
 * @interface MediaFilesEmbeddedItemsInner
 */
export interface MediaFilesEmbeddedItemsInner {
    /**
     * 
     * @type {MediaFilesEmbeddedItemsInnerAllOfLinks}
     * @memberof MediaFilesEmbeddedItemsInner
     */
    links?: MediaFilesEmbeddedItemsInnerAllOfLinks;
    /**
     * Media file code
     * @type {string}
     * @memberof MediaFilesEmbeddedItemsInner
     */
    code?: string;
    /**
     * Original filename of the media file
     * @type {string}
     * @memberof MediaFilesEmbeddedItemsInner
     */
    originalFilename?: string;
    /**
     * Mime type of the media file
     * @type {string}
     * @memberof MediaFilesEmbeddedItemsInner
     */
    mimeType?: string;
    /**
     * Size of the media file
     * @type {number}
     * @memberof MediaFilesEmbeddedItemsInner
     */
    size?: number;
    /**
     * Extension of the media file
     * @type {string}
     * @memberof MediaFilesEmbeddedItemsInner
     */
    extension?: string;
}

/**
 * Check if a given object implements the MediaFilesEmbeddedItemsInner interface.
 */
export function instanceOfMediaFilesEmbeddedItemsInner(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MediaFilesEmbeddedItemsInnerFromJSON(json: any): MediaFilesEmbeddedItemsInner {
    return MediaFilesEmbeddedItemsInnerFromJSONTyped(json, false);
}

export function MediaFilesEmbeddedItemsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaFilesEmbeddedItemsInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'links': !exists(json, '_links') ? undefined : MediaFilesEmbeddedItemsInnerAllOfLinksFromJSON(json['_links']),
        'code': !exists(json, 'code') ? undefined : json['code'],
        'originalFilename': !exists(json, 'original_filename') ? undefined : json['original_filename'],
        'mimeType': !exists(json, 'mime_type') ? undefined : json['mime_type'],
        'size': !exists(json, 'size') ? undefined : json['size'],
        'extension': !exists(json, 'extension') ? undefined : json['extension'],
    };
}

export function MediaFilesEmbeddedItemsInnerToJSON(value?: MediaFilesEmbeddedItemsInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '_links': MediaFilesEmbeddedItemsInnerAllOfLinksToJSON(value.links),
        'code': value.code,
        'original_filename': value.originalFilename,
        'mime_type': value.mimeType,
        'size': value.size,
        'extension': value.extension,
    };
}

