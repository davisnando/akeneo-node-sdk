/* tslint:disable */
/* eslint-disable */
/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MeasureFamilyListAllOfUnits
 */
export interface MeasureFamilyListAllOfUnits {
    /**
     * Measure code
     * @type {string}
     * @memberof MeasureFamilyListAllOfUnits
     */
    code?: string;
    /**
     * Mathematic operation to convert the unit into the standard unit
     * @type {object}
     * @memberof MeasureFamilyListAllOfUnits
     */
    convert?: object;
    /**
     * Measure symbol
     * @type {string}
     * @memberof MeasureFamilyListAllOfUnits
     */
    symbol?: string;
}

/**
 * Check if a given object implements the MeasureFamilyListAllOfUnits interface.
 */
export function instanceOfMeasureFamilyListAllOfUnits(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MeasureFamilyListAllOfUnitsFromJSON(json: any): MeasureFamilyListAllOfUnits {
    return MeasureFamilyListAllOfUnitsFromJSONTyped(json, false);
}

export function MeasureFamilyListAllOfUnitsFromJSONTyped(json: any, ignoreDiscriminator: boolean): MeasureFamilyListAllOfUnits {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'convert': !exists(json, 'convert') ? undefined : json['convert'],
        'symbol': !exists(json, 'symbol') ? undefined : json['symbol'],
    };
}

export function MeasureFamilyListAllOfUnitsToJSON(value?: MeasureFamilyListAllOfUnits | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'convert': value.convert,
        'symbol': value.symbol,
    };
}

