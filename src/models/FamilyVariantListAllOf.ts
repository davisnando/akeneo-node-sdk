/* tslint:disable */
/* eslint-disable */
/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FamilyVariantListAllOfLabels } from './FamilyVariantListAllOfLabels';
import {
    FamilyVariantListAllOfLabelsFromJSON,
    FamilyVariantListAllOfLabelsFromJSONTyped,
    FamilyVariantListAllOfLabelsToJSON,
} from './FamilyVariantListAllOfLabels';
import type { FamilyVariantListAllOfVariantAttributeSets } from './FamilyVariantListAllOfVariantAttributeSets';
import {
    FamilyVariantListAllOfVariantAttributeSetsFromJSON,
    FamilyVariantListAllOfVariantAttributeSetsFromJSONTyped,
    FamilyVariantListAllOfVariantAttributeSetsToJSON,
} from './FamilyVariantListAllOfVariantAttributeSets';

/**
 * 
 * @export
 * @interface FamilyVariantListAllOf
 */
export interface FamilyVariantListAllOf {
    /**
     * Family variant code
     * @type {string}
     * @memberof FamilyVariantListAllOf
     */
    code: string;
    /**
     * Attributes distribution according to the enrichment level
     * @type {Array<FamilyVariantListAllOfVariantAttributeSets>}
     * @memberof FamilyVariantListAllOf
     */
    variantAttributeSets: Array<FamilyVariantListAllOfVariantAttributeSets>;
    /**
     * 
     * @type {FamilyVariantListAllOfLabels}
     * @memberof FamilyVariantListAllOf
     */
    labels?: FamilyVariantListAllOfLabels;
}

/**
 * Check if a given object implements the FamilyVariantListAllOf interface.
 */
export function instanceOfFamilyVariantListAllOf(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "code" in value;
    isInstance = isInstance && "variantAttributeSets" in value;

    return isInstance;
}

export function FamilyVariantListAllOfFromJSON(json: any): FamilyVariantListAllOf {
    return FamilyVariantListAllOfFromJSONTyped(json, false);
}

export function FamilyVariantListAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): FamilyVariantListAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': json['code'],
        'variantAttributeSets': ((json['variant_attribute_sets'] as Array<any>).map(FamilyVariantListAllOfVariantAttributeSetsFromJSON)),
        'labels': !exists(json, 'labels') ? undefined : FamilyVariantListAllOfLabelsFromJSON(json['labels']),
    };
}

export function FamilyVariantListAllOfToJSON(value?: FamilyVariantListAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'variant_attribute_sets': ((value.variantAttributeSets as Array<any>).map(FamilyVariantListAllOfVariantAttributeSetsToJSON)),
        'labels': FamilyVariantListAllOfLabelsToJSON(value.labels),
    };
}

