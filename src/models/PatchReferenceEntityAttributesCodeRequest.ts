/* tslint:disable */
/* eslint-disable */
/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AttributesEmbeddedItemsInnerAllOfLabels } from './AttributesEmbeddedItemsInnerAllOfLabels';
import {
    AttributesEmbeddedItemsInnerAllOfLabelsFromJSON,
    AttributesEmbeddedItemsInnerAllOfLabelsFromJSONTyped,
    AttributesEmbeddedItemsInnerAllOfLabelsToJSON,
} from './AttributesEmbeddedItemsInnerAllOfLabels';

/**
 * 
 * @export
 * @interface PatchReferenceEntityAttributesCodeRequest
 */
export interface PatchReferenceEntityAttributesCodeRequest {
    /**
     * Attribute code
     * @type {string}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    code: string;
    /**
     * 
     * @type {AttributesEmbeddedItemsInnerAllOfLabels}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    labels?: AttributesEmbeddedItemsInnerAllOfLabels;
    /**
     * Attribute type. See <a href='/concepts/reference-entities.html#reference-entity-attribute'>type</a> section for more details.
     * @type {string}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    type: PatchReferenceEntityAttributesCodeRequestTypeEnum;
    /**
     * Whether the attribute is localizable, i.e. can have one value by locale
     * @type {boolean}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    valuePerLocale?: boolean;
    /**
     * Whether the attribute is scopable, i.e. can have one value by channel
     * @type {boolean}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    valuePerChannel?: boolean;
    /**
     * Whether the attribute should be part of the record's completeness calculation
     * @type {boolean}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    isRequiredForCompleteness?: boolean;
    /**
     * Maximum number of characters allowed for the value of the attribute when the attribute type is `text`
     * @type {number}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    maxCharacters?: number;
    /**
     * Whether the UI should display a text area instead of a simple field when the attribute type is `text`
     * @type {boolean}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    isTextarea?: boolean;
    /**
     * Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`
     * @type {boolean}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    isRichTextEditor?: boolean;
    /**
     * Validation rule type used to validate the attribute value when the attribute type is `text`
     * @type {string}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    validationRule?: PatchReferenceEntityAttributesCodeRequestValidationRuleEnum;
    /**
     * Regexp expression used to validate the attribute value when the attribute type is `text`
     * @type {string}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    validationRegexp?: string;
    /**
     * Extensions allowed when the attribute type is `image`
     * @type {Array<string>}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    allowedExtensions?: Array<string>;
    /**
     * Max file size in MB when the attribute type is `image`
     * @type {string}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    maxFileSize?: string;
    /**
     * Code of the linked reference entity when the attribute type is `reference_entity_single_link` or `reference_entity_multiple_links`
     * @type {string}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    referenceEntityCode?: string;
    /**
     * Whether decimals are allowed when the attribute type is `number`
     * @type {boolean}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    decimalsAllowed?: boolean;
    /**
     * Minimum value allowed when the attribute type is `number`
     * @type {string}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    minValue?: string;
    /**
     * Maximum value allowed when the attribute type is `number`
     * @type {string}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    maxValue?: string;
}


/**
 * @export
 */
export const PatchReferenceEntityAttributesCodeRequestTypeEnum = {
    Text: 'text',
    Image: 'image',
    Number: 'number',
    SingleOption: 'single_option',
    MultipleOptions: 'multiple_options',
    ReferenceEntitySingleLink: 'reference_entity_single_link',
    ReferenceEntityMultipleLinks: 'reference_entity_multiple_links'
} as const;
export type PatchReferenceEntityAttributesCodeRequestTypeEnum = typeof PatchReferenceEntityAttributesCodeRequestTypeEnum[keyof typeof PatchReferenceEntityAttributesCodeRequestTypeEnum];

/**
 * @export
 */
export const PatchReferenceEntityAttributesCodeRequestValidationRuleEnum = {
    Email: 'email',
    Url: 'url',
    Regexp: 'regexp',
    None: 'none'
} as const;
export type PatchReferenceEntityAttributesCodeRequestValidationRuleEnum = typeof PatchReferenceEntityAttributesCodeRequestValidationRuleEnum[keyof typeof PatchReferenceEntityAttributesCodeRequestValidationRuleEnum];


/**
 * Check if a given object implements the PatchReferenceEntityAttributesCodeRequest interface.
 */
export function instanceOfPatchReferenceEntityAttributesCodeRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "code" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function PatchReferenceEntityAttributesCodeRequestFromJSON(json: any): PatchReferenceEntityAttributesCodeRequest {
    return PatchReferenceEntityAttributesCodeRequestFromJSONTyped(json, false);
}

export function PatchReferenceEntityAttributesCodeRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchReferenceEntityAttributesCodeRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': json['code'],
        'labels': !exists(json, 'labels') ? undefined : AttributesEmbeddedItemsInnerAllOfLabelsFromJSON(json['labels']),
        'type': json['type'],
        'valuePerLocale': !exists(json, 'value_per_locale') ? undefined : json['value_per_locale'],
        'valuePerChannel': !exists(json, 'value_per_channel') ? undefined : json['value_per_channel'],
        'isRequiredForCompleteness': !exists(json, 'is_required_for_completeness') ? undefined : json['is_required_for_completeness'],
        'maxCharacters': !exists(json, 'max_characters') ? undefined : json['max_characters'],
        'isTextarea': !exists(json, 'is_textarea') ? undefined : json['is_textarea'],
        'isRichTextEditor': !exists(json, 'is_rich_text_editor') ? undefined : json['is_rich_text_editor'],
        'validationRule': !exists(json, 'validation_rule') ? undefined : json['validation_rule'],
        'validationRegexp': !exists(json, 'validation_regexp') ? undefined : json['validation_regexp'],
        'allowedExtensions': !exists(json, 'allowed_extensions') ? undefined : json['allowed_extensions'],
        'maxFileSize': !exists(json, 'max_file_size') ? undefined : json['max_file_size'],
        'referenceEntityCode': !exists(json, 'reference_entity_code') ? undefined : json['reference_entity_code'],
        'decimalsAllowed': !exists(json, 'decimals_allowed') ? undefined : json['decimals_allowed'],
        'minValue': !exists(json, 'min_value') ? undefined : json['min_value'],
        'maxValue': !exists(json, 'max_value') ? undefined : json['max_value'],
    };
}

export function PatchReferenceEntityAttributesCodeRequestToJSON(value?: PatchReferenceEntityAttributesCodeRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'labels': AttributesEmbeddedItemsInnerAllOfLabelsToJSON(value.labels),
        'type': value.type,
        'value_per_locale': value.valuePerLocale,
        'value_per_channel': value.valuePerChannel,
        'is_required_for_completeness': value.isRequiredForCompleteness,
        'max_characters': value.maxCharacters,
        'is_textarea': value.isTextarea,
        'is_rich_text_editor': value.isRichTextEditor,
        'validation_rule': value.validationRule,
        'validation_regexp': value.validationRegexp,
        'allowed_extensions': value.allowedExtensions,
        'max_file_size': value.maxFileSize,
        'reference_entity_code': value.referenceEntityCode,
        'decimals_allowed': value.decimalsAllowed,
        'min_value': value.minValue,
        'max_value': value.maxValue,
    };
}

