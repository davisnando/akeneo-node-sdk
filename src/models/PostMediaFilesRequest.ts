/* tslint:disable */
/* eslint-disable */
/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PostMediaFilesRequest
 */
export interface PostMediaFilesRequest {
    /**
     * The product to which the media file will be associated. It is a JSON string that follows this format '{"identifier":"product_identifier", "attribute":"attribute_code", "scope":"channel_code","locale":"locale_code"}'. You have to either use this field or the `product_model` field, but not both at the same time.
     * @type {string}
     * @memberof PostMediaFilesRequest
     */
    product?: string;
    /**
     * The product model to which the media file will be associated. It is a JSON string that follows this format '{"code":"product_model_code", "attribute":"attribute_code", "scope":"channel_code","locale":"locale_code"}'. You have to either use this field or the `product` field, but not both at the same time.
     * @type {string}
     * @memberof PostMediaFilesRequest
     */
    productModel?: string;
    /**
     * The binaries of the file
     * @type {Blob}
     * @memberof PostMediaFilesRequest
     */
    file: Blob;
}

/**
 * Check if a given object implements the PostMediaFilesRequest interface.
 */
export function instanceOfPostMediaFilesRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "file" in value;

    return isInstance;
}

export function PostMediaFilesRequestFromJSON(json: any): PostMediaFilesRequest {
    return PostMediaFilesRequestFromJSONTyped(json, false);
}

export function PostMediaFilesRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostMediaFilesRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'product': !exists(json, 'product') ? undefined : json['product'],
        'productModel': !exists(json, 'product_model') ? undefined : json['product_model'],
        'file': json['file'],
    };
}

export function PostMediaFilesRequestToJSON(value?: PostMediaFilesRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'product': value.product,
        'product_model': value.productModel,
        'file': value.file,
    };
}

