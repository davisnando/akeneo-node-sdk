/* tslint:disable */
/* eslint-disable */
/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MeasurementFamiliesGetList200ResponseLabels } from './MeasurementFamiliesGetList200ResponseLabels';
import {
    MeasurementFamiliesGetList200ResponseLabelsFromJSON,
    MeasurementFamiliesGetList200ResponseLabelsFromJSONTyped,
    MeasurementFamiliesGetList200ResponseLabelsToJSON,
} from './MeasurementFamiliesGetList200ResponseLabels';
import type { MeasurementFamiliesGetList200ResponseUnits } from './MeasurementFamiliesGetList200ResponseUnits';
import {
    MeasurementFamiliesGetList200ResponseUnitsFromJSON,
    MeasurementFamiliesGetList200ResponseUnitsFromJSONTyped,
    MeasurementFamiliesGetList200ResponseUnitsToJSON,
} from './MeasurementFamiliesGetList200ResponseUnits';

/**
 * 
 * @export
 * @interface MeasurementFamily
 */
export interface MeasurementFamily {
    /**
     * Measurement family code
     * @type {string}
     * @memberof MeasurementFamily
     */
    code: string;
    /**
     * 
     * @type {MeasurementFamiliesGetList200ResponseLabels}
     * @memberof MeasurementFamily
     */
    labels?: MeasurementFamiliesGetList200ResponseLabels;
    /**
     * Unit code used as the standard unit for this measurement family
     * @type {string}
     * @memberof MeasurementFamily
     */
    standardUnitCode: string;
    /**
     * 
     * @type {MeasurementFamiliesGetList200ResponseUnits}
     * @memberof MeasurementFamily
     */
    units: MeasurementFamiliesGetList200ResponseUnits;
}

/**
 * Check if a given object implements the MeasurementFamily interface.
 */
export function instanceOfMeasurementFamily(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "code" in value;
    isInstance = isInstance && "standardUnitCode" in value;
    isInstance = isInstance && "units" in value;

    return isInstance;
}

export function MeasurementFamilyFromJSON(json: any): MeasurementFamily {
    return MeasurementFamilyFromJSONTyped(json, false);
}

export function MeasurementFamilyFromJSONTyped(json: any, ignoreDiscriminator: boolean): MeasurementFamily {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': json['code'],
        'labels': !exists(json, 'labels') ? undefined : MeasurementFamiliesGetList200ResponseLabelsFromJSON(json['labels']),
        'standardUnitCode': json['standard_unit_code'],
        'units': MeasurementFamiliesGetList200ResponseUnitsFromJSON(json['units']),
    };
}

export function MeasurementFamilyToJSON(value?: MeasurementFamily | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'labels': MeasurementFamiliesGetList200ResponseLabelsToJSON(value.labels),
        'standard_unit_code': value.standardUnitCode,
        'units': MeasurementFamiliesGetList200ResponseUnitsToJSON(value.units),
    };
}

